<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on n0k0m3 Dev Blog</title>
    <link>https://n0k0m3.github.io/posts/</link>
    <description>Recent content in Posts on n0k0m3 Dev Blog</description>
    <generator>Hugo -- 0.148.1</generator>
    <language>en</language>
    <lastBuildDate>Thu, 12 Oct 2023 22:39:09 -0400</lastBuildDate>
    <atom:link href="https://n0k0m3.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JupyterHub on Baremetal Kubernetes - Part 1 - Setting up cluster</title>
      <link>https://n0k0m3.github.io/posts/nets-deployment/nets-deployment-1/</link>
      <pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://n0k0m3.github.io/posts/nets-deployment/nets-deployment-1/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In this blog post, we will guide you through the process of setting up a baremetal Kubernetes cluster tailored specifically for the Neural Transmissions (NETS)&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; lab, using NVIDIA DeepOps. JupyterHub, a multi-user server that manages and proxies multiple instances of the Jupyter notebook server, is a perfect fit for this research environment. It facilitates seamless collaboration and sharing of data science projects among researchers. Throughout this tutorial, we will walk you through the steps to set up a Kubernetes cluster on baremetal servers equipped with NVIDIA GPUs, and get it ready for the deployment of JupyterHub.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setting up Arch - Part 5 - Bugs Fixes</title>
      <link>https://n0k0m3.github.io/posts/setting_up_arch/bug_fixes/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate>
      <guid>https://n0k0m3.github.io/posts/setting_up_arch/bug_fixes/</guid>
      <description>&lt;h2 id=&#34;obs-studio-flickering-with-intel-graphics&#34;&gt;OBS Studio flickering with Intel Graphics&lt;/h2&gt;
&lt;p&gt;With some Intel graphics cards on XOrg (in my case, Tiger Lake Xe), OBS Studio will flicker with screen capture.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo nano /etc/X11/xorg.conf.d/20-intel.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Section &amp;#34;Device&amp;#34;
    Identifier &amp;#34;Intel Graphics&amp;#34;
    Driver &amp;#34;modesetting&amp;#34;
EndSection
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Reboot or restart XOrg server to apply the fix.&lt;/p&gt;
&lt;h2 id=&#34;delete-goodix-fingerprint-sensor-saved-fingerprint-data&#34;&gt;Delete Goodix Fingerprint Sensor saved fingerprint data&lt;/h2&gt;
&lt;p&gt;If you installed Windows and enrolled fingerprints with Goodix Fingerprint Sensor, the saved fingerprint data will prevent new enrollments in Linux.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Guide for hacking PSVita on Linux</title>
      <link>https://n0k0m3.github.io/posts/ps_vita_hacking/</link>
      <pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://n0k0m3.github.io/posts/ps_vita_hacking/</guid>
      <description>&lt;p&gt;Follow instructions from &lt;a href=&#34;https://guide.13375384.xyz/start&#34;&gt;https://guide.13375384.xyz/start&lt;/a&gt; or &lt;a href=&#34;https://vita.hacks.guide/&#34;&gt;https://vita.hacks.guide/&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Documents for compiling from sources for tools.&lt;/li&gt;
&lt;li&gt;Guide to mount TexFAT&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Put device in airplane mode during the &lt;code&gt;Content Manager&lt;/code&gt; connection process will make the steps much easier to do.&lt;/p&gt;
&lt;p&gt;DON&amp;rsquo;T MANUALLY SETTING YAMT, JUST USE YAMT SETUP USING VITADEPLOY (&lt;a href=&#34;https://guide.13375384.xyz/start&#34;&gt;guide&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&#34;finalhe&#34;&gt;FinalHE&lt;/h2&gt;
&lt;p&gt;Check prerequisites (&lt;a href=&#34;https://github.com/soarqin/finalhe&#34;&gt;https://github.com/soarqin/finalhe&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone https://github.com/soarqin/finalhe
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; finalhe
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;qmake &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Build artifacts in &lt;code&gt;src/FinalHE&lt;/code&gt;. Copy &lt;code&gt;VitaDeploy&lt;/code&gt; zip in the same folder as &lt;code&gt;FinalHE&lt;/code&gt; binary&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setting up Arch - Part 4 - Tips and Tricks</title>
      <link>https://n0k0m3.github.io/posts/setting_up_arch/tips_and_tricks/</link>
      <pubDate>Thu, 18 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://n0k0m3.github.io/posts/setting_up_arch/tips_and_tricks/</guid>
      <description>&lt;h2 id=&#34;fstab-mount-with-user-permssion&#34;&gt;&lt;code&gt;fstab&lt;/code&gt; mount with user permssion&lt;/h2&gt;
&lt;p&gt;Use KDE/GNOME partition manager to manage mount point and use mount options: &lt;code&gt;uid=1000,gid=1001,umask=022&lt;/code&gt;&lt;br&gt;
Or append to &lt;code&gt;/etc/fstab&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;UUID=&amp;lt;disk_UUID&amp;gt;   &amp;lt;mount_point&amp;gt;    &amp;lt;format&amp;gt;    uid=1000,gid=1001,umask=022,noatime 0 1
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;fstab-mount-ntfs-with-kernel-ntfs3-driver-from-kernel-515&#34;&gt;&lt;code&gt;fstab&lt;/code&gt; mount NTFS with kernel &lt;code&gt;NTFS3&lt;/code&gt; driver from kernel 5.15&lt;/h2&gt;
&lt;p&gt;Use KDE/GNOME partition manager to manage mount point, this will use the default &lt;code&gt;mount.ntfs -&amp;gt; ntfs-3g&lt;/code&gt; driver. We need to change the mount driver to &lt;code&gt;mount.ntfs3&lt;/code&gt; in &lt;code&gt;/etc/fstab&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;UUID=&amp;lt;disk_UUID&amp;gt;   &amp;lt;mount_point&amp;gt;    ntfs3       discard,noatime                     0 0
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Setting up Arch - Part 3 - Post-Installation Setup</title>
      <link>https://n0k0m3.github.io/posts/setting_up_arch/post_install/</link>
      <pubDate>Wed, 17 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://n0k0m3.github.io/posts/setting_up_arch/post_install/</guid>
      <description>&lt;h2 id=&#34;install-zsh4humans&#34;&gt;Install &lt;a href=&#34;https://github.com/romkatv/zsh4humans&#34;&gt;&lt;code&gt;zsh4humans&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I don&amp;rsquo;t need anything more fancy than romkatv&amp;rsquo;s &lt;code&gt;zsh4humans&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sh -c &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/n0k0m3/Personal-Setup/main/Setting_up_Arch/setup.sh&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;install-nextcloud&#34;&gt;Install Nextcloud&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo pacman -S nextcloud-client
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sync &lt;code&gt;.dotfiles&lt;/code&gt; with Nextcloud + &lt;code&gt;flameshot&lt;/code&gt; shortcut&lt;/p&gt;
&lt;h2 id=&#34;setting-up-pacman-and-makepkg-config&#34;&gt;Setting up &lt;code&gt;pacman&lt;/code&gt; and &lt;code&gt;makepkg&lt;/code&gt; config&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo nano /etc/pacman.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Set &lt;code&gt;ParallelDownloads = 10&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo nano /etc/makepkg.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Set compile flags &lt;code&gt;CFLAGS=&amp;quot;-march=native -mtune=native ...&amp;quot;&lt;/code&gt; and &lt;code&gt;MAKEFLAGS=&amp;quot;-j12&amp;quot;&lt;/code&gt; for &lt;code&gt;12&lt;/code&gt; being total number of available cores/threads:&lt;/p&gt;
&lt;h2 id=&#34;comparing-current-installation-with-installed-packages-of-previous-dist&#34;&gt;Comparing current installation with installed packages of previous dist&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python3 read_install.py &amp;lt;installed.log file&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;update-installedlog-with-current-setup&#34;&gt;Update &lt;code&gt;installed.log&lt;/code&gt; with current setup&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/n0k0m3/Personal-Setup/main/Setting_up_Arch/export_install_deps.py&#34;&gt;Download export_install_deps.py&lt;/a&gt;{: .btn .btn&amp;ndash;info }&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setting up Arch - Part 2 - `systemd` hooks with FIDO2 unlock</title>
      <link>https://n0k0m3.github.io/posts/setting_up_arch/systemd_setup/systemd_setup/</link>
      <pubDate>Tue, 16 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://n0k0m3.github.io/posts/setting_up_arch/systemd_setup/systemd_setup/</guid>
      <description>&lt;p&gt;By default Arch-based distros uses &lt;code&gt;busybox&lt;/code&gt; init, which doesn’t support some features comfort from &lt;code&gt;systemd&lt;/code&gt;. This guide will help you to setup &lt;code&gt;systemd&lt;/code&gt; hooks, switch encryption to LUKS2 for &lt;code&gt;systemd-cryptenroll&lt;/code&gt;, use U2F/FIDO2 key to unlock at boot, and &lt;code&gt;Plymouth&lt;/code&gt; for boot splash screen.&lt;/p&gt;
&lt;h2 id=&#34;systemd-hooks-and-plymouth-boot-splash-screen&#34;&gt;&lt;code&gt;systemd&lt;/code&gt; hooks and Plymouth boot splash screen&lt;/h2&gt;
&lt;p&gt;Follwing script will change &lt;code&gt;busybox&lt;/code&gt; init to &lt;code&gt;systemd&lt;/code&gt; hooks and setup &lt;code&gt;plymouth&lt;/code&gt; with &lt;code&gt;colorful_loop&lt;/code&gt; theme.&lt;/p&gt;
&lt;p&gt;Requirements: &lt;code&gt;yay&lt;/code&gt; (default on EndeavourOS)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setting up Arch - Part 1 - Swap on BTRFS</title>
      <link>https://n0k0m3.github.io/posts/setting_up_arch/setting_up_arch/</link>
      <pubDate>Mon, 15 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://n0k0m3.github.io/posts/setting_up_arch/setting_up_arch/</guid>
      <description>&lt;p&gt;This is setup on EndeavourOS/Manjaro, on barebone Arch should be a little bit different (install &lt;code&gt;yay&lt;/code&gt; before all of these steps)&lt;/p&gt;
&lt;h2 id=&#34;arch-setup&#34;&gt;Arch setup&lt;/h2&gt;
&lt;p&gt;Setting up Manjaro/EndeavourOS with Calamares installer using this partition Setup with SWAP file (turn on hibernation option):&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Partition&lt;/th&gt;
          &lt;th&gt;Mount Point&lt;/th&gt;
          &lt;th&gt;Filesystem&lt;/th&gt;
          &lt;th&gt;Size&lt;/th&gt;
          &lt;th&gt;Encryption Status&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;EFI system partition&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/boot/efi&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;FAT32&lt;/td&gt;
          &lt;td&gt;300-550 MB&lt;/td&gt;
          &lt;td&gt;Unencrypted&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;/boot&lt;/code&gt; partition&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/boot/efi&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;ext4&lt;/td&gt;
          &lt;td&gt;200-500 MB&lt;/td&gt;
          &lt;td&gt;Unencrypted&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;root&lt;/code&gt; partition&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;btrfs/LUKS&lt;/td&gt;
          &lt;td&gt;Rest of space&lt;/td&gt;
          &lt;td&gt;Encrypted&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Note: mount EFI with &lt;code&gt;boot&lt;/code&gt; flag and &lt;code&gt;/&lt;/code&gt; with &lt;code&gt;root&lt;/code&gt; flag.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Analysis of ProtonDB Linux Distribution</title>
      <link>https://n0k0m3.github.io/posts/small-projects/protondb_analysis/</link>
      <pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate>
      <guid>https://n0k0m3.github.io/posts/small-projects/protondb_analysis/</guid>
      <description>&lt;h3 id=&#34;data-preprocessing&#34;&gt;Data Preprocessing&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/n0k0m3/Personal-Setup/blob/main/ProtonDB_Analysis/analysis.ipynb&#34;&gt;Notebook link&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;cumulative-results&#34;&gt;Cumulative Results&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; On Dec 2nd 2019, ProtonDB contribute workflow changed to a questionnaire, subsequently changed the data structures. All data prior to this date are for reference only and should NOT be inferred.&lt;/p&gt;
&lt;h4 id=&#34;raw-user-counts-per-distro&#34;&gt;Raw user counts per distro&lt;/h4&gt;


&lt;div id=&#34;protondb_data/protondb_user_count.json&#34; class=&#34;plotly&#34; style=&#34;height:600&#34;&gt;&lt;/div&gt;
&lt;script&gt;
Plotly.d3.json(&#34;protondb_data/protondb_user_count.json&#34;, function(err, fig) {
    Plotly.plot(&#39;protondb_data\/protondb_user_count.json&#39;, fig.data, fig.layout, {responsive: true});
});
&lt;/script&gt;

&lt;h4 id=&#34;normalized-distro-market-share-on-protondb&#34;&gt;Normalized distro market share on ProtonDB&lt;/h4&gt;


&lt;div id=&#34;protondb_data/protondb_market_share.json&#34; class=&#34;plotly&#34; style=&#34;height:600&#34;&gt;&lt;/div&gt;
&lt;script&gt;
Plotly.d3.json(&#34;protondb_data/protondb_market_share.json&#34;, function(err, fig) {
    Plotly.plot(&#39;protondb_data\/protondb_market_share.json&#39;, fig.data, fig.layout, {responsive: true});
});
&lt;/script&gt;

&lt;h4 id=&#34;normalized-distro-market-share-on-protondb-merged-distro-base&#34;&gt;Normalized distro market share on ProtonDB (Merged distro base)&lt;/h4&gt;
&lt;p&gt;

&lt;div id=&#34;protondb_data/protondb_market_share_base.json&#34; class=&#34;plotly&#34; style=&#34;height:600&#34;&gt;&lt;/div&gt;
&lt;script&gt;
Plotly.d3.json(&#34;protondb_data/protondb_market_share_base.json&#34;, function(err, fig) {
    Plotly.plot(&#39;protondb_data\/protondb_market_share_base.json&#39;, fig.data, fig.layout, {responsive: true});
});
&lt;/script&gt;

Arch Linux and Arch-based distro is on the rise, while Debian-based (Ubuntu) distros are on the decline.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tensorflow with GPU support in Docker</title>
      <link>https://n0k0m3.github.io/posts/tensorflow_docker/</link>
      <pubDate>Sun, 02 May 2021 00:00:00 +0000</pubDate>
      <guid>https://n0k0m3.github.io/posts/tensorflow_docker/</guid>
      <description>&lt;p&gt;Following guide was tested on EndeavourOS and Manjaro (Arch-based) Linux distro.&lt;/p&gt;
&lt;h2 id=&#34;why&#34;&gt;Why?&lt;/h2&gt;
&lt;p&gt;Installing dependencies and setting up notebooks is usually a PITA: installing CUDA with CuDNN and TensorRT doesn&amp;rsquo;t have a common and easy to follow guide, along with recent (not recent) release of python 3.9, most ML/DL packages are not updated to this wheel. Also setting up &lt;code&gt;venv&lt;/code&gt; is hard to maintain and migrate as you have to backup the whole environment to other machine.&lt;/p&gt;</description>
    </item>
    <item>
      <title>VFIO Single GPU Passthrough Guide on Linux</title>
      <link>https://n0k0m3.github.io/posts/single_gpu_passthrough_guide/</link>
      <pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate>
      <guid>https://n0k0m3.github.io/posts/single_gpu_passthrough_guide/</guid>
      <description>&lt;p&gt;Why single GPU passthrough? Because I&amp;rsquo;m poor, using Ryzen non-APU CPU, and I don&amp;rsquo;t want to buy a second GPU just for passthrough. I&amp;rsquo;m using a single GPU passthrough for gaming on Windows and using Linux as my daily driver.&lt;/p&gt;
&lt;p&gt;In this guide, we will be going over how to set up a single GPU passthrough on Linux. This guide is meant to be a reference for myself and others who want to learn how to set up a single GPU passthrough on Linux. I&amp;rsquo;m using Arch Linux as the host OS, but this guide should work on any Linux distro.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
